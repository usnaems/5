'''Задана рекуррентная функция. Область определения функции – натуральные числа. Написать программу сравнительного
вычисления данной функции рекурсивно и итерационно. Определить границы применимости рекурсивного и итерационного подхода.
 Результаты сравнительного исследования времени вычисления представить в табличной и графической форме в виде отчета по лабораторной работе.
 11 вариант
 F(n<2) = -2;
 F(n) = (-1)n*(F(n-1) // (n-5)!)'''


import timeit
import matplotlib.pyplot as plt


# Функция для вычисления факториала числа
def custom_factorial(num, fact=1):
    for i in range(2, num + 1):
        fact *= i
    return fact



# Рекурсивная функция для вычисления значения
def recursive_factorial(n):
    if n < 5:
        return -2
    else:
        return pow(-1,n) * recursive_factorial(n - 1) // custom_factorial(n-5)



# Итеративная функция для вычисления значения
def iterative_factorial(n):
    if n < 5:
        return -2

    f_values = [10] * 5

    for i in range(2, n + 1):
        f = pow(-1, i) * ((f_values[-1])  // custom_factorial(i - 5))
        f_values.append(f)

    return f_values[-1]

# Вычисление и сравнение значений для нескольких значений n
for n in range(5, 15):
    print(f"n = {n}")
    result_recursive = recursive_factorial(n)
    result_iterative = iterative_factorial(n)
    print(f"Рекурсивное значение: {result_recursive}")
    print(f"Итеративное значение: {result_iterative}")
    print()

# Определение времени выполнения для разных значений n
n_values = list(range(5, 25))
recursive_times = []
iterative_times = []

for n in n_values:
    time_recursive = timeit.timeit(lambda: recursive_factorial(n), number=1)
    recursive_times.append(time_recursive)

    time_iterative = timeit.timeit(lambda: iterative_factorial(n), number=1)
    iterative_times.append(time_iterative)

# Вывод результатов времени выполнения
print("n\t| Рекурсивное время (сек)\t| Итеративное время (сек)")
print("-" * 50)

for i in range(len(n_values)):
    print(f"{n_values[i]}\t| {recursive_times[i]:.6f}\t\t\t| {iterative_times[i]:.6f}")

# Визуализация времени выполнения
plt.figure(figsize=(12, 6))
plt.plot(n_values, recursive_times, label='Рекурсивное время (сек)', marker='o')
plt.plot(n_values, iterative_times, label='Итеративное время (сек)', marker='x')
plt.xlabel('n')
plt.ylabel('Время (сек)')
plt.title('Сравнение времени выполнения рекурсивной и итеративной функций')
plt.legend()
plt.grid(True)
plt.show()

except RecursionError:
    print(
        '\nВы превысили относительную максимальную глубину рекурсии. Перезапустите программу и введите число меньше.')
